[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "appmod-with-genai",
    "section": "",
    "text": "This file will become your README and also the index of your documentation.",
    "crumbs": [
      "appmod-with-genai"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "appmod-with-genai",
    "section": "Install",
    "text": "Install\npip install appmod_with_genai",
    "crumbs": [
      "appmod-with-genai"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "appmod-with-genai",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1+1\n\n2",
    "crumbs": [
      "appmod-with-genai"
    ]
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "source\n\nfoo\n\n foo ()",
    "crumbs": [
      "core"
    ]
  },
  {
    "objectID": "Untitled.html",
    "href": "Untitled.html",
    "title": "appmod-with-genai",
    "section": "",
    "text": "! pip install asyncio\n\nCollecting asyncio\n  Downloading asyncio-3.4.3-py3-none-any.whl.metadata (1.7 kB)\nDownloading asyncio-3.4.3-py3-none-any.whl (101 kB)\n   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 101.8/101.8 kB 16.5 MB/s eta 0:00:00\nInstalling collected packages: asyncio\nSuccessfully installed asyncio-3.4.3\n\n\n\n\nimport asyncio\n\nfrom langchain_community.llms import Bedrock\nfrom langchain_community.chat_models import BedrockChat\nfrom langchain.schema.output_parser import StrOutputParser\nfrom langchain.prompts import ChatPromptTemplate\n\nllm = Bedrock(model_id=\"mistral.mistral-large-2402-v1:0\")\nchat = BedrockChat(model_id=\"mistral.mistral-large-2402-v1:0\")\nprompt = ChatPromptTemplate.from_template(\"Tell me a story about {topic}.\")\nparser = StrOutputParser()\n\n\nchain = prompt | llm\n\n\nresponse = chain.invoke({\"topic\": \"bears\"})\n\n\nprint (response)\n\n\n\nAssistant: Once upon a time, in a dense, green forest, there lived a family of bears: Papa Bear, Mama Bear, and their little cub, Baby Bear. They lived in a cozy cave, high up in the mountains, and spent their days playing, fishing, and exploring the forest.\n\nOne day, while they were out, a curious little girl named Goldilocks wandered into their part of the forest. She was lost and tired, and when she saw the bears' cave, she decided to go inside and rest.\n\nInside the cave, she found three bowls of porridge on the table. The first one was too hot, the second one was too cold, but the third one was just right, so she ate it all up.\n\nAfter eating, she felt sleepy and saw three chairs. She sat on the first one, but it was too hard. The second one was too soft, but the third one was just right. However, as she sat on it, the chair broke into pieces.\n\nFeeling even more tired, Goldilocks went upstairs and found three beds. The first one was too hard, the second one was too soft, but the third one was just right. She lay down and soon fell fast asleep.\n\nWhen the bears returned home, they were shocked to find their porridge eaten, their chairs used, and someone sleeping in Baby Bear's bed. Papa Bear, with his deep voice, said, \"Someone has been eating my porridge!\" Mama Bear, in her softer voice, said, \"Someone has been eating my porridge!\" And Baby Bear, in his smallest voice, said, \"Someone has eaten all of my porridge and it was just right!\"\n\nThey went to the living room and found the broken chair. Papa Bear said, \"Someone has been sitting in my chair!\" Mama Bear said, \"Someone has been sitting in my chair!\" And Baby Bear cried, \"Someone has broken my chair!\"\n\nFinally, they went upstairs and found Goldilocks sleeping in Baby Bear's bed. Papa Bear said, \"Someone has been sleeping in my bed!\" Mama Bear said, \"Someone has been sleeping in my bed!\" And Baby Bear cried, \"Someone is sleeping in my bed and she's still there!\"\n\nGoldilocks woke up with a start and, seeing the three bears, she was so\n\n\n\nfile_inputs = \"./ref_data/original_file.java\"\n\nloader = TextLoader(file_inputs)\ndocuments = loader.load()\n\n# print(source_code_contents)\nfor document in documents:\n    content = document.page_content\n    metadata = document.metadata\n\nsource = metadata.get('source')",
    "crumbs": [
      "Untitled.html"
    ]
  },
  {
    "objectID": "appmod_with_genai_start.html",
    "href": "appmod_with_genai_start.html",
    "title": "Stuff Documents",
    "section": "",
    "text": "# Introduction &gt; Add later.\n\nimport json\nimport os\nimport sys\n\nimport boto3\nimport asyncio\nfrom typing import List\n\nfrom langchain_community.llms import Bedrock\nfrom langchain_community.chat_models import BedrockChat\nfrom langchain.prompts import ChatPromptTemplate, PromptTemplate\nfrom langchain_community.document_loaders import GithubFileLoader\n\n\nmodel_id = \"mistral.mistral-large-2402-v1:0\"\n\n\nbedrock_runtime = boto3.client('bedrock-runtime')\n\nllm = BedrockChat(\n    client=bedrock_runtime,\n    model_id=model_id,\n)\n\nchat = BedrockChat(model_id=model_id)\n\n\n! pip install asyncio\n# parser = StrOutputParser()\n\nRequirement already satisfied: asyncio in /opt/conda/lib/python3.10/site-packages (3.4.3)\n\n\n\n# If you haven't set your access token as an environment variable, pass it in here.\nfrom getpass import getpass\n\nACCESS_TOKEN = getpass()\n\n ········\n\n\n\nloader = GithubFileLoader(\n    repo=\"jihed/helloworld-mdb\",\n    access_token=ACCESS_TOKEN,  # delete/comment out this argument if you've set the access token as an env var.\n    branch= \"main\",\n    github_api_url=\"https://api.github.com\",\n    file_filter=lambda file_path: file_path.endswith(\n        \"HelloWorldTopicMDB.java\"\n    ),  # load all java files.\n)\n\n\nsample_source_code= loader.load()\n\n\nprint(sample_source_code)\n\n[Document(page_content='/*\\n * JBoss, Home of Professional Open Source\\n * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\\n * contributors by the @authors tag. See the copyright.txt in the\\n * distribution for a full listing of individual contributors.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \"License\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n * http://www.apache.org/licenses/LICENSE-2.0\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \"AS IS\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\npackage org.jboss.as.quickstarts.mdb;\\n\\nimport java.util.logging.Logger;\\nimport javax.ejb.ActivationConfigProperty;\\nimport javax.ejb.MessageDriven;\\nimport javax.jms.JMSException;\\nimport javax.jms.Message;\\nimport javax.jms.MessageListener;\\nimport javax.jms.TextMessage;\\n\\n/**\\n * &lt;p&gt;\\n * A simple Message Driven Bean that asynchronously receives and processes the messages that are sent to the topic.\\n * &lt;/p&gt;\\n *\\n * @author Serge Pagop (spagop@redhat.com)\\n */\\n@MessageDriven(name = \"HelloWorldQTopicMDB\", activationConfig = {\\n        @ActivationConfigProperty(propertyName = \"destinationLookup\", propertyValue = \"topic/HELLOWORLDMDBTopic\"),\\n        @ActivationConfigProperty(propertyName = \"destinationType\", propertyValue = \"javax.jms.Topic\"),\\n        @ActivationConfigProperty(propertyName = \"acknowledgeMode\", propertyValue = \"Auto-acknowledge\")})\\npublic class HelloWorldTopicMDB implements MessageListener {\\n\\n    private static final Logger LOGGER = Logger.getLogger(HelloWorldTopicMDB.class.toString());\\n\\n    /**\\n     * @see MessageListener#onMessage(Message)\\n     */\\n    public void onMessage(Message rcvMessage) {\\n        TextMessage msg = null;\\n        try {\\n            if (rcvMessage instanceof TextMessage) {\\n                msg = (TextMessage) rcvMessage;\\n                LOGGER.info(\"Received Message from topic: \" + msg.getText());\\n            } else {\\n                LOGGER.warning(\"Message of wrong type: \" + rcvMessage.getClass().getName());\\n            }\\n        } catch (JMSException e) {\\n            throw new RuntimeException(e);\\n        }\\n    }\\n}\\n', metadata={'path': 'src/main/java/org/jboss/as/quickstarts/mdb/HelloWorldTopicMDB.java', 'sha': 'acd7de34f25785bb5c8d9a8cb9068e71ea9e0a4b', 'source': 'https://api.github.com/jihed/helloworld-mdb/blob/main/src/main/java/org/jboss/as/quickstarts/mdb/HelloWorldTopicMDB.java'})]\n\n\n\n!pip install -qU langchain-text-splitters\n\n\n# Full list of supported languages\n[e.value for e in Language]\n\n\nRecursiveCharacterTextSplitter.get_separators_for_language(Language.JAVA)\n\n\nfrom langchain_core.documents import Document\nfrom langchain.chains.combine_documents import create_stuff_documents_chain\n\nprompt = ChatPromptTemplate.from_messages(\n    [(\"system\", \"Generate for me a step by step guide in mardown format to migrate all the documents in context written in enterprise Java EE source code to Quarkus:\\n\\n{context}\")]\n)\nchain = create_stuff_documents_chain(llm, prompt)\n#print(print(documents))\n\nresponse = chain.invoke({\"context\": sample_source_code})\n\nprint(response, end= '\\n')\n\n\n\nSure, here's a step-by-step guide in Markdown format to help you migrate your Java EE application to Quarkus. Please note that this is a general guide and the exact steps might vary depending on the specifics of your application.\n\n```markdown\n# Migrating Java EE Applications to Quarkus\n\nThis guide provides a step-by-step process to migrate a Java EE application to Quarkus.\n\n## Prerequisites\n\n- Basic understanding of Java EE and Quarkus\n- Java Development Kit (JDK) installed on your system\n- Apache Maven or Gradle for building your application\n\n## Step 1: Analyze Your Application\n\nBefore starting the migration process, analyze your application to understand its architecture, dependencies, and functionalities. This will help you identify the components that need to be migrated and the potential challenges you might face.\n\n## Step 2: Set Up Quarkus\n\nSet up a new Quarkus project using the Quarkus Maven or Gradle plugin. You can also use the Quarkus code generator to create your project.\n\n## Step 3: Migrate Java EE Components\n\nStart migrating your Java EE components to Quarkus. Here's a general guide:\n\n- **JAX-RS**: Quarkus supports JAX-RS with RESTEasy Reactive. You can directly use your JAX-RS resources in Quarkus.\n- **CDI**: Quarkus uses Arc as its CDI implementation. You can use `@Inject` for dependency injection.\n- **JPA**: Quarkus supports JPA with Hibernate ORM and Panache. You can use your JPA entities directly.\n- **JMS**: Quarkus supports JMS with Apache Artemis. However, the `@MessageDriven` annotation is not supported. You can use the `@Incoming` annotation on a method to consume messages.\n\n## Step 4: Update Configuration\n\nUpdate your configuration according to Quarkus. Quarkus uses MicroProfile Config for configuration. You can use `application.properties` for configuration.\n\n## Step 5: Test Your Application\n\nAfter migrating your components and updating the configuration, test your application to ensure everything works as expected.\n\n## Step 6: Optimize Your Application\n\nOnce your application is working, optimize it for Quarkus. This might involve using Quarkus-specific features and libraries.\n\n## Example: Migrating a Message-Driven Bean\n\nHere's an example of how you can migrate a message-driven bean to Quarkus:\n\n```java\n@Incoming(\"topic/HELLOWORLDMDBTopic\")\npublic void onMessage(Message rcvMessage) {\n    // Your code here\n}\n```\n\nIn this example, the `@MessageDriven` annotation is replaced with the `@Incoming` annotation.\n\n## Conclusion\n\nMigrating a Java EE application to Quarkus involves several steps and requires a good understanding of both Java EE and Quarkus. This guide provides a general overview of the process. For more detailed information, please refer to the Quarkus documentation.\n```\n\n\n\nRefine Document\nThis is an advanced prompt, where we ask the LLM: 1.Build a Migration Plan from Java EE to Quarkus 2.Based on that plan, we ask to generate Quarkus code.\n\nTodo: Add pom.xml to the model to provide request.\n\n\nfrom langchain.chains import RefineDocumentsChain, LLMChain\nfrom langchain_core.prompts import PromptTemplate\n\n# This controls how each document will be formatted. Specifically,\n# it will be passed to `format_document` - see that function for more\n# details.\ndocument_prompt = PromptTemplate(\n    input_variables=[\"page_content\"],\n     template=\"{page_content}\"\n)\ndocument_variable_name = \"context\"\n\n# The prompt here should take as an input variable the\n# `document_variable_name`\nprompt = PromptTemplate.from_template(\n    \"[INST] Build a migration plan from Java Entreprise EE to Quarkus for this content: {context} [/INST]\"\n)\ninitial_llm_chain = LLMChain(llm=llm, prompt=prompt)\ninitial_response_name = \"prev_response\"\n# The prompt here should take as an input variable the\n# `document_variable_name` as well as `initial_response_name`\nprompt_refine = PromptTemplate.from_template(\n    \"[INST] Here's your Migration Plan: {prev_response}. Now generate a quarkus code for: {context} [/INST]\"\n)\nrefine_llm_chain = LLMChain(llm=llm, prompt=prompt_refine)\nchain = RefineDocumentsChain(\n    initial_llm_chain=initial_llm_chain,\n    refine_llm_chain=refine_llm_chain,\n    document_prompt=document_prompt,\n    document_variable_name=document_variable_name,\n    initial_response_name=initial_response_name,\n)\n\n\n\nresponse = chain.invoke(sample_source_code)\n\n\n#print(response.get('output_text'), end= '\\n')\ntype(response.get('output_text'))\n\nwith open(\"output.txt\", \"w\") as f:\n    f.write(response.get('output_text'))",
    "crumbs": [
      "Stuff Documents"
    ]
  }
]